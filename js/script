// js/script.js - الإصدار المجاني الكامل

class ImageToPDFConverter {
    constructor() {
        this.selectedImages = [];
        this.currentImage = null;
        this.init();
    }

    init() {
        this.bindEvents();
        this.showLoadingBar();
    }

    bindEvents() {
        // عناصر DOM
        this.uploadBox = document.getElementById('uploadBox');
        this.imageInput = document.getElementById('imageInput');
        this.cameraBtn = document.getElementById('cameraBtn');
        this.galleryBtn = document.getElementById('galleryBtn');
        this.previewSection = document.getElementById('previewSection');
        this.previewImage = document.getElementById('previewImage');
        this.selectedImagesSection = document.getElementById('selectedImagesSection');
        this.imagesGrid = document.getElementById('imagesGrid');
        this.imagesCount = document.getElementById('imagesCount');

        // مستمعي الأحداث
        this.uploadBox.addEventListener('click', () => this.imageInput.click());
        this.imageInput.addEventListener('change', (e) => this.handleImageSelection(e));
        this.cameraBtn.addEventListener('click', () => this.openCamera());
        this.galleryBtn.addEventListener('click', () => this.openGallery());

        // تهيئة السحب والإفلات
        this.initDragAndDrop();
    }

    initDragAndDrop() {
        this.uploadBox.addEventListener('dragover', (e) => {
            e.preventDefault();
            this.uploadBox.style.background = '#e0e7ff';
        });

        this.uploadBox.addEventListener('dragleave', () => {
            this.uploadBox.style.background = '';
        });

        this.uploadBox.addEventListener('drop', (e) => {
            e.preventDefault();
            this.uploadBox.style.background = '';
            this.handleDroppedFiles(e.dataTransfer.files);
        });
    }

    handleDroppedFiles(files) {
        const imageFiles = Array.from(files).filter(file => file.type.startsWith('image/'));
        this.processImageFiles(imageFiles);
    }

    openCamera() {
        this.imageInput.setAttribute('capture', 'camera');
        this.imageInput.click();
        setTimeout(() => this.imageInput.removeAttribute('capture'), 1000);
    }

    openGallery() {
        this.imageInput.removeAttribute('capture');
        this.imageInput.setAttribute('multiple', 'multiple');
        this.imageInput.click();
    }

    handleImageSelection(event) {
        const files = event.target.files;
        if (files.length > 0) {
            this.processImageFiles(Array.from(files));
        }
    }

    processImageFiles(files) {
        files.forEach((file, index) => {
            const reader = new FileReader();
            
            reader.onload = (e) => {
                const imageData = {
                    id: Date.now() + index,
                    src: e.target.result,
                    name: file.name,
                    type: file.type,
                    file: file
                };

                this.selectedImages.push(imageData);

                if (index === 0) {
                    this.showPreview(imageData);
                }

                this.updateSelectedImagesUI();
            };

            reader.readAsDataURL(file);
        });
    }

    showPreview(imageData) {
        this.currentImage = imageData;
        this.previewImage.src = imageData.src;
        this.previewSection.classList.remove('hidden');
        this.previewSection.scrollIntoView({ behavior: 'smooth' });
    }

    updateSelectedImagesUI() {
        this.imagesGrid.innerHTML = '';
        this.imagesCount.textContent = this.selectedImages.length;

        if (this.selectedImages.length > 0) {
            this.selectedImagesSection.classList.remove('hidden');

            this.selectedImages.forEach((image, index) => {
                const imageItem = this.createImageItem(image, index);
                this.imagesGrid.appendChild(imageItem);
            });
        } else {
            this.selectedImagesSection.classList.add('hidden');
        }
    }

    createImageItem(image, index) {
        const item = document.createElement('div');
        item.className = 'image-item';
        
        item.innerHTML = `
            <img src="${image.src}" alt="صورة ${index + 1}">
            <button class="remove-btn" data-id="${image.id}">
                <i class="fas fa-times"></i>
            </button>
        `;

        item.querySelector('img').addEventListener('click', () => {
            this.showPreview(image);
        });

        item.querySelector('.remove-btn').addEventListener('click', (e) => {
            e.stopPropagation();
            this.removeImage(image.id);
        });

        return item;
    }

    removeImage(imageId) {
        this.selectedImages = this.selectedImages.filter(img => img.id !== imageId);
        
        if (this.currentImage && this.currentImage.id === imageId) {
            if (this.selectedImages.length > 0) {
                this.showPreview(this.selectedImages[0]);
            } else {
                this.previewSection.classList.add('hidden');
                this.currentImage = null;
            }
        }
        
        this.updateSelectedImagesUI();
    }

    convertToPDF(images = null) {
        const imagesToConvert = images || [this.currentImage];
        const { jsPDF } = window.jspdf;
        const doc = new jsPDF();

        imagesToConvert.forEach((image, index) => {
            if (index > 0) doc.addPage();
            
            const imgProps = doc.getImageProperties(image.src);
            const pdfWidth = doc.internal.pageSize.getWidth();
            const pdfHeight = (imgProps.height * pdfWidth) / imgProps.width;
            
            doc.addImage(image.src, 'JPEG', 0, 0, pdfWidth, pdfHeight);
        });

        const fileName = imagesToConvert.length > 1 ? 'مستندات.pdf' : 'مستند.pdf';
        doc.save(fileName);
        
        this.showSuccessMessage(`تم تحويل ${imagesToConvert.length} صورة إلى PDF بنجاح!`);
    }

    showSuccessMessage(message) {
        const notification = document.createElement('div');
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: var(--success-color);
            color: white;
            padding: 1rem 2rem;
            border-radius: 10px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
            z-index: 1000;
            animation: slideIn 0.3s ease;
        `;
        notification.textContent = message;
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.remove();
        }, 3000);
    }

    showLoadingBar() {
        const loadingBar = document.getElementById('loadingBar');
        let width = 0;
        
        const interval = setInterval(() => {
            if (width >= 100) {
                clearInterval(interval);
                loadingBar.style.width = '0%';
            } else {
                width++;
                loadingBar.style.width = width + '%';
            }
        }, 20);
    }
}

// تهيئة التطبيق عند تحميل الصفحة
document.addEventListener('DOMContentLoaded', function() {
    new ImageToPDFConverter();
    
    // إضافة أنماط للرسوم المتحركة
    const style = document.createElement('style');
    style.textContent = `
        @keyframes slideIn {
            from { transform: translateX(100%); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }
        
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        .feature-card, .converter-card {
            animation: fadeIn 0.6s ease;
        }
    `;
    document.head.appendChild(style);
});
